options:
  parameters:
    author: radiogis_director
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: prueba_borrar
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: blocks_vector_source_x_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'True'
    tags: '[]'
    type: float
    vector: (0, 10, 20)
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [33, 189]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    N: '4'
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Calculo los pesos complejos\
      \ que afectan a la onda debido a la ubicacion del elemento radiador en el espacio\"\
      \"\"\n\n    def __init__(self,N=4,distancias=0):\n        \"\"\"fase_weight\"\
      \"\"\n        gr.sync_block.__init__(\n            self,\n            name='fase_weight',\
      \   \n            in_sig=[np.float32],\n            out_sig=[np.complex64,np.complex64,np.complex64,np.complex64]\n\
      \        )\n        self.distancias = distancias\n        self.N=N\n\n    def\
      \ work(self, input_items, output_items):\n        theta_i_gr=input_items[0]\n\
      \        fases=-2*np.pi*self.distancias*np.cos(theta_i_gr*np.pi/180)\n     \
      \   output_items[:] = np.exp(fases*1j)\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    distancias: 1,2,3,4
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('fase_weight', 'blk', [('N', '4'), ('distancias', '0')], [('0', 'float',
      1)], [('0', 'complex', 1), ('1', 'complex', 1), ('2', 'complex', 1), ('3', 'complex',
      1)], 'Calculo los pesos complejos que afectan a la onda debido a la ubicacion
      del elemento radiador en el espacio', ['N', 'distancias'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [211, 161]
    rotation: 0
    state: true
- name: qtgui_const_sink_x_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '4'
    size: '1024'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 172]
    rotation: 0
    state: true

connections:
- [blocks_vector_source_x_0, '0', epy_block_0, '0']
- [epy_block_0, '0', qtgui_const_sink_x_0, '0']
- [epy_block_0, '1', qtgui_const_sink_x_0, '1']
- [epy_block_0, '2', qtgui_const_sink_x_0, '2']
- [epy_block_0, '3', qtgui_const_sink_x_0, '3']

metadata:
  file_format: 1
